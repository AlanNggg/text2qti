# -*- coding: utf-8 -*-
#
# Copyright (c) 2020, Geoffrey M. Poore
# All rights reserved.
#
# Licensed under the BSD 3-Clause License:
# http://opensource.org/licenses/BSD-3-Clause
#

"""
Generate IMS Content Package manifest for QTI 2.1.
"""

import datetime
from typing import Dict, List, Optional

from .markdown import Image

MANIFEST_START = '''\
<?xml version="1.0" encoding="UTF-8"?>
<manifest identifier="{manifest_identifier}" 
    xmlns="http://www.imsglobal.org/xsd/imscp_v1p1" 
    xmlns:imsmd="http://www.imsglobal.org/xsd/imsmd_v1p2" 
    xmlns:imsqti="http://www.imsglobal.org/xsd/imsqti_v2p1"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://www.imsglobal.org/xsd/imscp_v1p1 http://www.imsglobal.org/xsd/imscp_v1p1.xsd 
                        http://www.imsglobal.org/xsd/imsmd_v1p2 http://www.imsglobal.org/xsd/imsmd_v1p2p4.xsd 
                        http://www.imsglobal.org/xsd/imsqti_v2p1 http://www.imsglobal.org/xsd/imsqti_v2p1.xsd">
  <metadata>
    <schema>IMS Content</schema>
    <schemaversion>1.2</schemaversion>
    <imsmd:lom>
      <imsmd:general>
        <imsmd:title>
          <imsmd:string>QTI 2.1 assessment generated by text2qti</imsmd:string>
        </imsmd:title>
      </imsmd:general>
      <imsmd:lifeCycle>
        <imsmd:contribute>
          <imsmd:date>
            <imsmd:dateTime>{date}</imsmd:dateTime>
          </imsmd:date>
        </imsmd:contribute>
      </imsmd:lifeCycle>
      <imsmd:rights>
        <imsmd:copyrightAndOtherRestrictions>
          <imsmd:value>yes</imsmd:value>
        </imsmd:copyrightAndOtherRestrictions>
        <imsmd:description>
          <imsmd:string>Private (Copyrighted) - http://en.wikipedia.org/wiki/Copyright</imsmd:string>
        </imsmd:description>
      </imsmd:rights>
    </imsmd:lom>
  </metadata>
  <organizations/>
  <resources>
'''

ASSESSMENT_TEST_RESOURCE = '''\
    <resource identifier="{test_identifier}" type="imsqti_test_xmlv2p1" href="assessmentTests/{test_file}">
      <metadata>
        <imsqti:qtiMetadata>
          <imsqti:timeDependent>false</imsqti:timeDependent>
          <imsqti:interactionType>choiceInteraction</imsqti:interactionType>
          <imsqti:interactionType>extendedTextInteraction</imsqti:interactionType>
          <imsqti:interactionType>textEntryInteraction</imsqti:interactionType>
        </imsqti:qtiMetadata>
      </metadata>
      <file href="assessmentTests/{test_file}"/>
    </resource>
'''

ASSESSMENT_ITEM_RESOURCE = '''\
    <resource identifier="{item_identifier}" type="imsqti_item_xmlv2p1" href="assessmentItems/{item_file}">
      <metadata>
        <imsqti:qtiMetadata>
          <imsqti:itemTemplate>false</imsqti:itemTemplate>
          <imsqti:timeDependent>false</imsqti:timeDependent>
          <imsqti:composite>false</imsqti:composite>
{interaction_types}
        </imsqti:qtiMetadata>
      </metadata>
      <file href="assessmentItems/{item_file}"/>
    </resource>
'''

IMAGE_RESOURCE = '''\
    <resource identifier="text2qti_image_{ident}" type="webcontent" href="{path}">
      <file href="{path}"/>
    </resource>
'''

MANIFEST_END = '''\
  </resources>
</manifest>
'''


def imsmanifest21(*, 
                  manifest_identifier: str,
                  test_identifier: str,
                  test_file: str,
                  item_resources: List[Dict[str, str]],
                  images: Dict[str, Image],
                  date: Optional[str] = None) -> str:
    '''
    Generate `imsmanifest.xml` for QTI 2.1.
    
    Args:
        manifest_identifier: Unique identifier for the manifest
        test_identifier: Identifier for the assessment test
        test_file: Filename of the assessment test XML
        item_resources: List of dicts with 'identifier', 'file', and 'interaction_types' keys
        images: Dictionary of images to include
        date: ISO date string (defaults to today)
    '''
    if date is None:
        date = str(datetime.date.today())
    
    xml = []
    xml.append(MANIFEST_START.format(manifest_identifier=manifest_identifier, date=date))
    
    # Add assessment test resource
    xml.append(ASSESSMENT_TEST_RESOURCE.format(
        test_identifier=test_identifier,
        test_file=test_file
    ))
    
    # Add assessment item resources
    for item in item_resources:
        interaction_types_xml = ''
        for int_type in item.get('interaction_types', []):
            interaction_types_xml += f'          <imsqti:interactionType>{int_type}</imsqti:interactionType>\n'
        
        xml.append(ASSESSMENT_ITEM_RESOURCE.format(
            item_identifier=item['identifier'],
            item_file=item['file'],
            interaction_types=interaction_types_xml.rstrip()
        ))
    
    # Add image resources
    for image in images.values():
        xml.append(IMAGE_RESOURCE.format(ident=image.id, path=image.qti_xml_path))
    
    xml.append(MANIFEST_END)
    return ''.join(xml)
